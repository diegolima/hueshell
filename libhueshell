#!/bin/bash
# This file is intended to be sourced, not executed!
###############################################################################
# Global Variables:
#
# These are declared by the lib and used to make data available accross the
# script:
#
#   - LIGHT: Assocative array containing information about each light
#   - LIGHT_IDS: Array containing the IDs of detected lights
###############################################################################
declare -A LIGHT
declare -a LIGHT_IDS
declare -A LIGHTGROUP
declare -a LIGHTGROUP_IDS

export LIGHT
export LIGHT_IDS


###############################################################################
# TODO: Write proper documentation
###############################################################################
validIp() {
    local oifs
    local ip
    local stat

    ip="${1}"
    stat=1

    if [ -z "${ip}" ]; then return 1; fi

    if [[ "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        oifs=$IFS
        IFS='.'
        ip=($ip)
        IFS=$oifs
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

###############################################################################
# Creates a new user on the Hue bridge 
# Globals:
#   - RETURN
# Arguments:
#   - Mandatory: Bridge Address (ip)
#   - Optional: Application Name
# Returns:
#   - Success: JSON containing a username (access token):
#              [{"success":{"username": "83b7780291a6ceffbe0bd049104df"}}]
#
#   - Error:   JSON containing error message
#              [{"error":{"type":101,"address":"","description":"link button not pressed"}}]
# Exit Codes:
#   - 0: success
#   - 1: error - mandatory argument not provided
#   - 2: error - bridge communication problem
#   - 3: error - unexpected reply
###############################################################################
hueCreateUser(){
    local bridge
    local appname
    local endpoint
    local output
    RETURN=""
    bridge="${1}"

    if [ -z "${1}" ]; then return 1; fi

    if [ ! -z "${2}" ]; then
        appname="${2}"
    else
        appname="hueshell"
    fi

    endpoint="http://${bridge}/api"

    output=$(curl -s --data "{\"devicetype\": \"${appname}#${HOSTNAME}\"}" "${endpoint}")
    if [[ "${output}" =~ "error" ]]; then
        export RETURN="${output}"
        return 2
    elif [[ "${output}" =~ "success" ]]; then
        export RETURN="${output}"
        return 0
    else
        echo "hueCreateUser() - Something unexpected happened!"
        echo "Output: ${output}"
        return 3
    fi
}

###############################################################################
# Retrieves the Hue bridge configuration parameters
# Globals:
#   - RETURN
# Arguments:
#   - Mandatory: Bridge Address (ip)
#   - Mandatory: Bridg username (Access Token)
# Returns:
#   - Success: JSON containing the current bridge configuration
#
#   - Error:   JSON containing error message
#              [{"error":{"type":101,"address":"","description":"link button not pressed"}}]
# Exit Codes:
#   - 0: success
#   - 1: error - mandatory argument not provided
#   - 2: error - bridge communication problem
###############################################################################
hueGetConfig(){
    local bridge
    local token
    local endpoint
    local output
    RETURN=""
    bridge="${1}"
    token="${2}"

    if [[ ( -z "${bridge}" ) || ( -z "${token}" ) ]]; then return 1; fi

    endpoint="http://${bridge}/api/${token}/config"
    output=$(curl -s "${endpoint}")
    if [[ "${output}" =~ "zigbeechannel" ]]; then
        export RETURN="${output}"
        return 0
    else 
        export RETURN="${output}"
        return 2
    fi
}


###############################################################################
# Loads information about lights present in the Hue bridge
#
# Globals:
#   - JQ
#   - LIGHT: Associative array containing information about available lights
#       * LIGHT[number.type] - A fixed name describing the type of light
#       * LIGHT[number.name] - A unique, editable name given to the light.
#       * LIGHT[number.modelid] - The hardware model of the light.
#       * LIGHT[number.uniqueid] - Unique id of the device. 
#       * LIGHT[number.swversion] - An identifier for the software version running on the light.
#       * LIGHT[number.manufacturername] - The manufacturer name.
#       * LIGHT[number.luminaireuniqueid] - Unique ID of the luminaire the light is a part of
#       * LIGHT[number.state.on] - On/Off state of the light.
#       * LIGHT[number.state.xy] - The x and y coordinates of a color in CIE color space.
#       * LIGHT[number.state.ct] - The Mired Color temperature of the light.
#       * LIGHT[number.state.bri] - Brightness of the light.
#       * LIGHT[number.state.hue] - Hue of the light.
#       * LIGHT[number.state.sat] - Saturation of the light.
#       * LIGHT[number.state.alert] - The alert effect, which is a temporary change to the bulbâ€™s state.
#       * LIGHT[number.state-reachable] - Indicates if a light can be reached by the bridge.
#       * LIGHT[number.state-colormode] - Indicates the color mode in which the light is working
#   - LIGHT_IDS: Array containing the ID for each present light
#
# Arguments:
#   - Mandatory: Bridge Address (ip)
#   - Mandatory: Bridg username (Access Token)
# Returns:
# Exit Codes:
#   - 0: success
#   - 1: error - mandatory argument not provided
#   - 2: error - bridge communication problem
#   - 3: error - unexpected reply
###############################################################################
#shellcheck disable=2046
hueLoadLights(){
    local bridge
    local token
    local endpoint
    local output
    local light_number
    bridge="${1}"
    token="${2}"

    if [[ ( -z "${bridge}" ) || ( -z "${token}" ) ]]; then return 1; fi
    
    endpoint="http://${bridge}/api/${token}/lights"

    output=$(curl -s "${endpoint}") || \
        return 2
    LIGHT_IDS=($(echo "${output}"|${JQ} keys|cut -f2 -d\"|egrep -v '\[|\]'))

    light_number="${#LIGHT_IDS[*]}"
    for((i=0;i<light_number;i++)); do
        # Light Details
        eval LIGHT["${LIGHT_IDS[$i]}.type"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].type")
        eval LIGHT["${LIGHT_IDS[$i]}.name"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].name")
        eval LIGHT["${LIGHT_IDS[$i]}.modelid"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].modelid")
        eval LIGHT["${LIGHT_IDS[$i]}.uniqueid"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].uniqueid")
        eval LIGHT["${LIGHT_IDS[$i]}.swversion"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].swversion")
        eval LIGHT["${LIGHT_IDS[$i]}.manufacturername"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].manufacturername")
        eval LIGHT["${LIGHT_IDS[$i]}.luminaireuniqueid"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].luminaireuniqueid")

        # Light State
        eval LIGHT["${LIGHT_IDS[$i]}.state.on"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].state.on")
        eval LIGHT["${LIGHT_IDS[$i]}.state.xy"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].state.xy")
        eval LIGHT["${LIGHT_IDS[$i]}.state.ct"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].state.ct")
        eval LIGHT["${LIGHT_IDS[$i]}.state.bri"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].state.bri")
        eval LIGHT["${LIGHT_IDS[$i]}.state.hue"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].state.hue")
        eval LIGHT["${LIGHT_IDS[$i]}.state.sat"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].state.sat")
        eval LIGHT["${LIGHT_IDS[$i]}.state.alert"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].state.alert")
        eval LIGHT["${LIGHT_IDS[$i]}.state.effect"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].state.effect")
        eval LIGHT["${LIGHT_IDS[$i]}.state.reachable"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].state.reachable")
        eval LIGHT["${LIGHT_IDS[$i]}.state.colormode"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHT_IDS[$i]}\"].state.colormode")
    done

    return 0
}

###############################################################################
# Loads information about lights present in the Hue bridge
#
# Globals:
#   - JQ
#   - LIGHTGROUP: Associative array containing information about available lights
#       * LIGHTGROUP[number.type] - Type of the Group.
#       * LIGHTGROUP[number.name] - Human readable name of the group.
#       * LIGHTGROUP[number.class] - Category of Room types.
#       * LIGHTGROUP[number.lights] - The IDs of the lights that are in the group.
#       * LIGHTGROUP[number.action] - The light state of one of the lamps in the group.
#       
#   - LIGHTGROUP_IDS: Array containing the ID for each present group
# Arguments:
#   - Mandatory: Bridge Address (ip)
#   - Mandatory: Bridg username (Access Token)
# Returns:
# Exit Codes:
#   - 0: success
#   - 1: error - mandatory argument not provided
#   - 2: error - bridge communication problem
#   - 3: error - unexpected reply
###############################################################################
#shellcheck disable=2046
hueLoadGroups(){
    local bridge
    local token
    local endpoint
    local output
    local lightgroup_number
    bridge="${1}"
    token="${2}"

    if [[ ( -z "${bridge}" ) || ( -z "${token}" ) ]]; then return 1; fi
    
    endpoint="http://${bridge}/api/${token}/groups"

    output=$(curl -s "${endpoint}") || \
        return 2

    LIGHTGROUP_IDS=($(echo "${output}"|${JQ} keys|cut -f2 -d\"|egrep -v '\[|\]'))
    lightgroup_number="${#LIGHTGROUP_IDS[*]}"
    for((i=0;i<lightgroup_number;i++)); do
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.name"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].name")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.type"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].type")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.class"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].class")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.lights"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].lights")

        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.action.on"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].action.on")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.action.xy"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].action.xy")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.action.ct"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].action.ct")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.action.bri"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].action.bri")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.action.hue"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].action.hue")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.action.sat"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].action.sat")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.action.alert"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].action.alert")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.action.effect"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].action.effect")
        eval LIGHTGROUP["${LIGHTGROUP_IDS[$i]}.action.colormode"]=$(echo "${output}"|${JQ} -c ".[\"${LIGHTGROUP_IDS[$i]}\"].action.colormode")
    done
    return 0
}
