#!/bin/bash
# This file is intended to be sourced, not executed!


###############################################################################
# TODO: Write proper documentation
###############################################################################
validIp() {
    local oifs
    local ip
    local stat

    ip="${1}"
    stat=1

    if [ -z "${ip}" ]; then return 1; fi

    if [[ "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

###############################################################################
# Creates a new user on the Hue bridge 
# Globals:
#   - RETURN
# Arguments:
#   - Mandatory: Bridge Address (ip)
#   - Optional: Application Name
# Returns:
#   - Success: JSON containing a username (access token):
#              [{"success":{"username": "83b7780291a6ceffbe0bd049104df"}}]
#
#   - Error:   JSON containing error message
#              [{"error":{"type":101,"address":"","description":"link button not pressed"}}]
# Exit Codes:
#   - 0: success
#   - 1: error - mandatory argument not provided
#   - 2: error - bridge communication problem
#   - 3: error - unexpected reply
###############################################################################
hueCreateUser(){
    local bridge
    local appname
    local endpoint
    local output
    RETURN=""
    bridge="${1}"

    if [ -z "${1}" ]; then return 1; fi

    if [ ! -z "${2}" ]; then
        appname="${2}"
    else
        appname="hueshell"
    fi

    endpoint="http://${bridge}/api"

    output=$(curl -s --data "{\"devicetype\": \"${appname}#hueshell\"}" "${endpoint}")
    if [[ "${output}" =~ "error" ]]; then
        export RETURN="${output}"
        return 2
    elif [[ "${output}" =~ "success" ]]; then
        export RETURN="${output}"
        return 0
    else
        echo "hueCreateUser() - Something unexpected happened!"
        echo "Output: ${output}"
        return 3
    fi
}

###############################################################################
# Retrieves the Hue bridge configuration parameters
# Globals:
#   - RETURN
# Arguments:
#   - Mandatory: Bridge Address (ip)
#   - Mandatory: Bridg username (Access Token)
# Returns:
#   - Success: JSON containing the current bridge configuration
#
#   - Error:   JSON containing error message
#              [{"error":{"type":101,"address":"","description":"link button not pressed"}}]
# Exit Codes:
#   - 0: success
#   - 1: error - mandatory argument not provided
#   - 2: error - bridge communication problem
#   - 3: error - unexpected reply
###############################################################################
hueGetConfig(){
    local bridge
    local token
    local endpoint
    local output
    RETURN=""
    bridge="${1}"
    token="${2}"

    if [[ ( -z "${bridge}" ) || ( -z "${token}" ) ]]; then return 1; fi

    endpoint="http://${bridge}/api/${token}/config"
    output=$(curl -s "${endpoint}")
    if [[ "${output}" =~ "zigbeechannel" ]]; then
        export RETURN="${output}"
        return 0
    else 
        export RETURN="${output}"
        return 2
    fi
}


###############################################################################
# Loads information about lights present in the Hue bridge
# Globals:
#   - RETURN
#   - JQ
#   - LIGHT: Composite array containing information about available lights
#       * LIGHT[number][type]
#       * LIGHT[number][name]
# Arguments:
#   - Mandatory: Bridge Address (ip)
#   - Mandatory: Bridg username (Access Token)
# Returns:
# Exit Codes:
#   - 0: success
#   - 1: error - mandatory argument not provided
#   - 2: error - bridge communication problem
#   - 3: error - unexpected reply
###############################################################################
hueLoadLights(){
    local bridge
    local token
    local endpoint
    local output
    local LIGHT_NUMBER
    RETURN=""
    bridge="${1}"
    token="${2}"

    if [[ ( -z "${bridge}" ) || ( -z "${token}" ) ]]; then return 1; fi
    
    endpoint="http://${bridge}/api/${token}/lights"

    output=$(curl -s "${endpoint}") || \
        return 2
    LIGHT_IDS=($(echo "${output}"|${JQ} keys|cut -f2 -d\"|egrep -v '\[|\]'))

    LIGHT_NUMBER="${#LIGHT_IDS[*]}"
    for((i=0;i<LIGHT_NUMBER;i++)); do
        eval LIGHT["${LIGHT_IDS[$i]}.id"]=$(echo "${output}"|$JQ ".[\"${LIGHT_IDS[$i]}\"].uniqueid")
        eval LIGHT["${LIGHT_IDS[$i]}.type"]=$(echo "${output}"|$JQ ".[\"${LIGHT_IDS[$i]}\"].type")
        eval LIGHT["${LIGHT_IDS[$i]}.name"]=$(echo "${output}"|$JQ ".[\"${LIGHT_IDS[$i]}\"].name")
        eval LIGHT["${LIGHT_IDS[$i]}.alert"]=$(echo "${output}"|$JQ ".[\"${LIGHT_IDS[$i]}\"].state.alert")
        eval LIGHT["${LIGHT_IDS[$i]}.online"]=$(echo "${output}"|$JQ ".[\"${LIGHT_IDS[$i]}\"].state.on")
        eval LIGHT["${LIGHT_IDS[$i]}.reachable"]=$(echo "${output}"|$JQ ".[\"${LIGHT_IDS[$i]}\"].state.reachable")
        eval LIGHT["${LIGHT_IDS[$i]}.brightness"]=$(echo "${output}"|$JQ ".[\"${LIGHT_IDS[$i]}\"].state.brightness")
    done

}
