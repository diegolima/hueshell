#!/bin/bash
# shellcheck disable=1090

###############################################################################
# Global Variables:
#   - APPDIR: Application's home directory
#   - BRIDGE: Bridge address read from the configuration file
#   - BRIDGETOKEN: Bridge username read from the configuration file
#   - JQ: JQ binary location
#   - NMAP: NMAP binary location
#   - RETURN: String containing inter-function data
#   - TOPPID: PID of the parent shell process. Used to enable subshells to
#             abort the script execution.
###############################################################################
declare APPDIR
declare BRIDGE
declare BRIDGETOKEN
declare JQ
declare NMAP
declare RETURN
declare TOPPID

APPDIR="${HOME}/.hueshell"
NMAP=$(which nmap)
JQ=$(which jq)
TOPPID=$$

if [ -f "${0}"/libhueshell ]; then
    . "${0}"/libhueshell
elif [ -f libhueshell ]; then
    . libhueshell
else
    echo "Could not find libhueshell"
    kill $TOPPID
fi
if [[ ( -z "${JQ}" ) && ( -x "${APPDIR}"/jq ) ]]; then JQ="${APPDIR}"/jq; fi
if [ -f "${APPDIR}"/config ]; then
    . "${APPDIR}"/config
fi

# Initialize settings.
doInit(){
    local -l choice

    if ! [ -d "${APPDIR}" ]; then
        mkdir -p "${APPDIR}" || \
            ( echo "Could not initialize ${APPDIR}" && \
              echo "Please check that you have permission to create that directory" && \
              kill $TOPPID )
    fi
    if [ -z "${JQ}" ]; then
        echo "JQ is a dependency and is missing. I'll try to install it for you."
        wget 'http://stedolan.github.io/jq/download/linux64/jq' -O "${APPDIR}"/jq
        chmod +x "${APPDIR}"/jq
    fi
   
    if [ -f "${APPDIR}"/config ]; then
        echo "A configuration file already exists. Do you want to reset your settings?"
        echo "Please note that if you do this you'll need to re-authorize the application."
        read -r choice
        echo ""
    else
        choice="y"
    fi

    if [[ ( "${choice}" == "y" ) || ( "${choice}" == "yes" ) ]]; then
        unset choice
        local bridge
        local bridgetoken
        local SUBNET
        local SUBNETS
        local -l SKIP
        while [[ ( "${choice}" != "y" ) && ( ${choice} != "yes") ]]; do
            if [[ ( ! -z "${NMAP}" ) && ( ${SKIP} != "y" ) ]]; then
                echo "Trying to auto-discover Philips Hue Bridges on your network..."

                # FIXME: only scan only up to /24 networks due to the time nmap needs to scan large ones
                SUBNETS=$(ip route show|awk '{print $1}'|grep -v default|egrep '/(2[4-9]|3[0-2])')
                for SUBNET in ${SUBNETS}; do
                    echo "Scanning ${SUBNET}"
                    ${NMAP} -sP "${SUBNET}" > /dev/null
                done
                bridge=$(arp -an|grep '00:17:88'|awk '{match($0,/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/); ip = substr($0,RSTART,RLENGTH); print ip}')
            fi
            if [ -z "${bridge}" ]; then
                echo 'What is your bridge IP address?'
                read -r bridge
                echo ""
            else
                echo "Hue bridge found on address ${bridge}"
            fi

            if validIp "${bridge}"; then
                choice="y"
            else
                echo "${bridge} doesn't seem to be a valid IP Address."
                echo "Please enter a valid Hue bridge address."
                unset bridge
                SKIP="y"
            fi
        done
        echo ""
        echo "We're going to try to communicate with the bridge."
        echo "Please press the central button on it and press enter to continue."
        read -r choice
        echo ""

        hueCreateUser "${bridge}" || \
            ( echo "There was a problem communicating with the bridge." && \
              echo "The error was: ${RETURN}" && \
              kill $TOPPID )
        
        bridgetoken=$(echo "${RETURN}"|cut -f6 -d\")

        echo "Validating bridge communication..."
        hueGetConfig "${bridge}" "${bridgetoken}" || \
            ( echo "Could not validate communication parameters." && \
              echo "The error was: ${RETURN}" && \
              kill $TOPPID )

        echo "All set! Writing configuration files"
        echo "BRIDGE=${bridge}"           >  "${APPDIR}"/config
        echo "BRIDGETOKEN=${bridgetoken}" >> "${APPDIR}"/config
       
        echo ""
        echo "You may now start using hueshell to communicate with your brige."
        echo "For starters, you may want to list available lights using:"
        echo "$ hue list lights"
    fi
}

doLightAction(){
    local i
    local color
    local action
    local target
    local state
    local nocolor

    action="${1}"
    target="${2}"
    state="${3}"
    nocolor="\e[0m"

    case "${action}" in
        "")
            echo "You must specify an action!"
            echo "Valid actions are:"
            echo "  - list"
            ;;
        list|ls)
            hueLoadLights "${BRIDGE}" "${BRIDGETOKEN}"
            echo "${#LIGHT_IDS[*]} lights have been detected."
            for((i=0;i<${#LIGHT_IDS[*]};i++)); do
                if [ "${LIGHT[${LIGHT_IDS[$i]}.state.reachable]}" == "false" ]; then
                    color="\e[90m" # Dark Grey
                elif [ "${LIGHT[${LIGHT_IDS[$i]}.state.on]}" == "true" ]; then
                    color="\e[32m" # Green
                elif [ "${LIGHT[${LIGHT_IDS[$i]}.state.on]}" == "false" ]; then
                    color="\e[31m" # Red
                fi
                echo -e "${color}  - Light ${LIGHT_IDS[$i]}: ${LIGHT[${LIGHT_IDS[$i]}.name]} (${LIGHT[${LIGHT_IDS[$i]}.type]})${nocolor}"
            done
            ;;
        set)
            hueSetLights "${target}" "${state}"
            ;;
        *)
            echo "Unimplemented action :("
            ;;
    esac
}
doGroupAction(){
    local i
    local action

    action="${1}"

    case "${action}" in
        "")
            echo "You must specify an action!"
            echo "Valid actions are:"
            echo "  - list"
            ;;
        list|ls)
            hueLoadGroups "${BRIDGE}" "${BRIDGETOKEN}"
            echo "${#LIGHTGROUP_IDS[*]} groups have been detected."
            for((i=0;i<${#LIGHTGROUP_IDS[*]};i++)); do
                echo -e "  - Group ${LIGHTGROUP_IDS[$i]}: ${LIGHTGROUP[${LIGHTGROUP_IDS[$i]}.name]}"
            done
            ;;
        *)
            echo "Unimplemented action :("
            ;;
    esac

}

case "${1}" in
    "init") doInit;;
    light|lights)
        doLightAction "${2}" "${3}" "${4}" 
        ;;
    group)
        doGroupAction "${2}" "${3}" "${4}"
        ;;
    room)
        doRoomAction "${2}" "${3}" "${4}"
        ;;
    *) showhelp;;
esac
