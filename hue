#!/bin/bash
APPDIR="${HOME}/.hueshell"
NMAP=$(which nmap)
JQ=$(which jq)
TOPPID=$$

if [ -f "${0}"/libhueshell ]; then
# shellcheck source=./libhueshell
    . "${0}"/libhueshell
elif [ -f libhueshell ]; then
    . libhueshell
else
    echo "Could not find libhueshell"
    kill $TOPPID
fi
if [[ ( -z "${JQ}" ) && ( -x "${APPDIR}"/jq ) ]]; then JQ="${APPDIR}"/jq; fi

# Initialize settings.
doInit(){
    local -l CHOICE

    if ! [ -d "${APPDIR}" ]; then
        mkdir -p "${APPDIR}" || \
            ( echo "Could not initialize ${APPDIR}" && \
              echo "Please check that you have permission to create that directory" && \
              kill $TOPPID )
    fi
    if [ -z "${JQ}" ]; then
        echo "JQ is a dependency and is missing. I'll try to install it for you."
        wget 'http://stedolan.github.io/jq/download/linux64/jq' -O "${APPDIR}"/jq
        chmod +x "${APPDIR}"/jq
    fi
   
    if [ -f "${APPDIR}"/config ]; then
        echo "A configuration file already exists. Do you want to reset your settings?"
        echo "Please note that if you do this you'll need to re-authorize the application."
        read -r CHOICE
        echo ""
    else
        CHOICE="y"
    fi

    if [[ ( "${CHOICE}" == "y" ) || ( "${CHOICE}" == "yes" ) ]]; then
        unset CHOICE
        local BRIDGE
        local BRIDGETOKEN
        local SUBNET
        local SUBNETS
        local -l SKIP
        while [[ ( "${CHOICE}" != "y" ) && ( ${CHOICE} != "yes") ]]; do
            if [[ ( ! -z "${NMAP}" ) && ( ${SKIP} != "y" ) ]]; then
                echo "Trying to auto-discover Philips Hue Bridges on your network..."

                # FIXME: only scan only up to /24 networks due to the time nmap needs to scan large ones
                SUBNETS=$(ip route show|awk '{print $1}'|grep -v default|egrep '/(2[4-9]|3[0-2])')
                for SUBNET in ${SUBNETS}; do
                    echo "Scanning ${SUBNET}"
                    ${NMAP} -sP "${SUBNET}" > /dev/null
                done
                BRIDGE=$(arp -an|grep '00:17:88'|awk '{match($0,/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/); ip = substr($0,RSTART,RLENGTH); print ip}')
            fi
            if [ -z "${BRIDGE}" ]; then
                echo 'What is your bridge IP address?'
                read -r BRIDGE
                echo ""
            else
                echo "Hue bridge found on address ${BRIDGE}"
            fi

            if valid_ip "${BRIDGE}"; then
                CHOICE="y"
            else
                echo "${BRIDGE} doesn't seem to be a valid IP Address."
                echo "Please enter a valid Hue bridge address."
                unset BRIDGE
                SKIP="y"
            fi
        done
        echo ""
        echo "We're going to try to communicate with the bridge."
        echo "Please press the central button on it and press enter to continue."
        read -r CHOICE
        echo ""

        hueCreateUser "${BRIDGE}" || \
            ( echo "There was a problem communicating with the bridge." && \
              echo "The error was: ${RETURN}" && \
              kill $TOPPID )
        
        BRIDGETOKEN=$(echo "${RETURN}"|cut -f6 -d\")

        echo "Validating bridge communication..."
        hueGetConfig "${BRIDGE}" "${BRIDGETOKEN}" || \
            ( echo "Could not validate communication parameters." && \
              echo "The error was: ${RETURN}" && \
              kill $TOPPID )

        echo "All set! Writing configuration files"
        echo "BRIDGE=${BRIDGE}"           >  "${APPDIR}"/config
        echo "BRIDGETOKEN=${BRIDGETOKEN}" >> "${APPDIR}"/config
       
        echo ""
        echo "You may now start using hueshell to communicate with your brige."
        echo "For starters, you may want to list available lights using:"
        echo "$ hue list lights"
    fi
}

case "${1}" in
    "init") doInit;;
    "list") doListDevices "${2}";;
    *) showhelp;;
esac
